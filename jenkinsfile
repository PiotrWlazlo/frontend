def imageName="192.168.44.44:8082/docker_registry/frontend"
def dockerRegistry="https://192.168.44.44:8082"
def registryCredentials="artifactory"
def dockerTag=""

pipeline {
  agent {
    label 'agent'
  }
  environment {
        scannerHome = tool 'SonarQube'
    }
  stages {
    stage('Build') {
      steps {
        checkout scm
      }
    }
    stage('Test') {
      steps {
        sh "pip3 install -r requirements.txt"
        sh "python3 -m pytest --cov=. --cov-report xml:test-results/coverage.xml --junitxml=test-results/pytest-report.xml"
        
      }
    }
    
        stage('Sonarqube analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            
        }   
    }
    stage('Build application Image'){
        steps{
            script {
                dockerTag = "${env.BUILD_ID}"
                applicationImage = docker.build("$imageName:$dockerTag",".")
                // This step should not normally be used in your script. Consult the inline help for details.
                    
            }
        }
    }
    stage('Push application Image'){
        steps{
            script {
    
    withDockerRegistry(credentialsId: 'artifactory', url: "$dockerRegistry") {
                        applicationImage.push()
                }
}
}
}
      
  }
post {
    always {
        junit testResults: "test-results/*.xml"
        cleanWs()
    }
}
  
}